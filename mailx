#!/bin/bash

# Function to check if a string exists in a file
check_string_in_file() {
    local file=$1
    local string=$2
    grep -qF "$string" "$file" 2>/dev/null
}

# Function to generate a blowfish secret
generate_blowfish_secret() {
    tr -dc 'a-zA-Z0-9./' < /dev/urandom | fold -w 32 | head -n 1
}

function hide_output {
	OUTPUT=$(mktemp)
	set +e
	"$@" &> "$OUTPUT"
	E=$?
	set -e
	if [ $E != 0 ]; then
		# Something failed.
		echo
		echo "FAILED: $*"
		echo -----------------------------------------
		cat "$OUTPUT"
		echo -----------------------------------------
		exit $E
	fi
	rm -f "$OUTPUT"
}
# Function to update a setting in the php.ini file
update_php_ini() {
    local setting=$1
    local value=$2
    local ini_file=$3

    if grep -q "^${setting} = " "$ini_file"; then
        sed -i "s/^${setting} = .*/${setting} = ${value}/" "$ini_file"
    else
        echo "${setting} = ${value}" >> "$ini_file"
    fi
}

function apt_get_quiet {
  DEBIAN_FRONTEND=noninteractive hide_output apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" "$@"
}

function apt_install {
	apt_get_quiet install "$@"
}
# Function to retrieve stored password
retrieve_file_data() {
    local filepath=$1
    if [ -f "$filepath" ]; then
        cat "$filepath"
    else
        echo "Error: Password file $filepath not found."
        exit 1
    fi
}
function restart_service {
	hide_output service "$1" restart
}
# Function to generate a random password with only letters and numbers
generate_password() {
    local length=$1
    local chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    local password=""
    for i in $(seq 1 $length); do
        password+=$(echo $chars | fold -w1 | shuf | head -n1)
    done
    echo $password
}

# Function to configure Dovecot for quotas
configure_dovecot_quota() {
    echo "Configuring Dovecot for quota support..."

    # Backup existing configuration files
    cp /etc/dovecot/dovecot.conf /etc/dovecot/dovecot.conf.bak
    cp /etc/dovecot/conf.d/10-mail.conf /etc/dovecot/conf.d/10-mail.conf.bak
    cp /etc/dovecot/conf.d/20-imap.conf /etc/dovecot/conf.d/20-imap.conf.bak
    cp /etc/dovecot/conf.d/20-pop3.conf /etc/dovecot/conf.d/20-pop3.conf.bak

            # Enable maildir format
        # Define the new mail_location setting
        new_mail_location="mbox:~/mail:INBOX=/var/mail/vhosts/%d/%n"

        # Escape forward slashes for sed
        escaped_mail_location=$(echo "$new_mail_location" | sed 's/\//\\\//g')

        # Use sed to replace the mail_location line in the configuration file
        sudo sed -i "s/^mail_location = .*$/mail_location = $escaped_mail_location/" /etc/dovecot/conf.d/10-mail.conf

    # Enable quota support
    cat <<EOT > /etc/dovecot/conf.d/90-quota.conf
plugin {
  quota = maildir:User quota
  quota_rule = *:storage=1G
}

protocol imap {
  mail_plugins = \$mail_plugins quota
}

protocol pop3 {
  mail_plugins = \$mail_plugins quota
}
EOT

    echo "Dovecot quota configuration complete."
}

# Function to restart Dovecot service
restart_dovecot() {
    echo "Restarting Dovecot service..."
    systemctl restart dovecot
    echo "Dovecot service restarted."
}

# Function to create or update the Postfix virtual alias file
update_postfix_virtual() {
    local domain=$1
    local username=$2

    if ! check_string_in_file "/etc/postfix/virtual" "$username@$domain"; then
        echo "$username@$domain $username" >> /etc/postfix/virtual
        postmap /etc/postfix/virtual 2>/dev/null
       # echo "Updated /etc/postfix/virtual with $username@$domain."
    else
        echo "Entry for $username@$domain already exists in /etc/postfix/virtual."
    fi
}

# Function to update the Postfix main.cf configuration
update_postfix_maincf() {
    local domain=$1
    echo "Postfix main.cf configuration...."

    if ! check_string_in_file "/etc/postfix/main.cf" "virtual_alias_domains"; then
        echo "virtual_alias_domains = $domain" >> /etc/postfix/main.cf 2>/dev/null
    else
        sed -i "/^virtual_alias_domains/c\virtual_alias_domains = $domain" /etc/postfix/main.cf 2>/dev/null
    fi

    if ! check_string_in_file "/etc/postfix/main.cf" "virtual_alias_maps"; then
        echo "virtual_alias_maps = hash:/etc/postfix/virtual" >> /etc/postfix/main.cf 2>/dev/null
    fi

    if ! check_string_in_file "/etc/postfix/main.cf" "mydomain"; then
        echo "mydomain = $domain" >> /etc/postfix/main.cf 2>/dev/null
    else
        sed -i "/^mydomain/c\mydomain = $domain" /etc/postfix/main.cf 2>/dev/null
    fi

    if ! check_string_in_file "/etc/postfix/main.cf" "myorigin"; then
        echo "myorigin = \$mydomain" >> /etc/postfix/main.cf 2>/dev/null
    else
        sed -i "/^myorigin/c\myorigin = \$mydomain" /etc/postfix/main.cf 2>/dev/null
    fi

    if ! check_string_in_file "/etc/postfix/main.cf" "mydestination"; then
        echo "mydestination = \$myhostname, localhost.\$mydomain, localhost, \$mydomain" >> /etc/postfix/main.cf 2>/dev/null
    else
        sed -i "/^mydestination/c\mydestination = \$myhostname, localhost.\$mydomain, localhost, \$mydomain" /etc/postfix/main.cf 2>/dev/null
    fi

    echo "[OK]"
}


# Function to update Postfix configuration files
update_postfix_config() {
    local domain=$1
    local hostname=$2

    echo "Downloading customized Postfix configuration files....."

    # Backup original configuration files
    cp /etc/postfix/main.cf /etc/postfix/main.cf.bak
    cp /etc/postfix/master.cf /etc/postfix/master.cf.bak

    # Download customized Postfix configuration files
    wget -qO /etc/postfix/main.cf https://raw.githubusercontent.com/gtmylab/mailx/main/postfix_main.cf
    wget -qO /etc/postfix/master.cf https://raw.githubusercontent.com/gtmylab/mailx/main/postfix_master.cf
    echo "[OK]"

    echo "Replacing Postfix placeholders with actual values..."

    # Replace placeholders with actual values in Postfix configuration files
    sed -i "s/{EMAIL_DOMAIN}/$domain/g" /etc/postfix/main.cf 2>/dev/null
    sed -i "s/{EMAIL_DOMAIN}/$domain/g" /etc/postfix/master.cf 2>/dev/null
    sed -i "s/{HOSTNAME}/$hostname/g" /etc/postfix/main.cf 2>/dev/null
    sed -i "s/{HOSTNAME}/$hostname/g" /etc/postfix/master.cf 2>/dev/null
    echo "[OK]"

    echo "Postfix configuration updated..."
    # Restart Postfix to apply changes
    restart_service postfix
    echo "[OK]"

}



# Function to install phpmyadmin
setup_phpmyadmin() {
    echo "Installing phpMyAdmin..."

# Variables
PMA_VERSION="5.1.1"
PMA_DIR="/var/www/html/phpmyadmin"
PMA_URL="https://files.phpmyadmin.net/phpMyAdmin/${PMA_VERSION}/phpMyAdmin-${PMA_VERSION}-all-languages.tar.gz"
PMA_TAR="phpMyAdmin-${PMA_VERSION}-all-languages.tar.gz"
PMA_TAR_DIR="phpMyAdmin-${PMA_VERSION}-all-languages"


# Download and extract phpMyAdmin
wget -q $PMA_URL -O $PMA_TAR
tar -xzf $PMA_TAR

# Move to the desired directory
sudo mv $PMA_TAR_DIR $PMA_DIR

# Generate a new secret
#SECRET=$(openssl rand -base64 32)
SECRET=$(generate_blowfish_secret)

# Create or update the config file with the new secret
cp $PMA_DIR/config.sample.inc.php $PMA_DIR/config.inc.php
CONFIG_FILE="$PMA_DIR/config.inc.php"

#sed -i "s/\$cfg\['blowfish_secret'\].*/\$cfg\['blowfish_secret'\] = '$SECRET';/" $CONFIG_FILE
sed -i "s|\(\$cfg\['blowfish_secret'\]\).*|\1 = '$SECRET';|" $CONFIG_FILE

# Set the appropriate permissions
sudo chown -R www-data:www-data $PMA_DIR
sudo find $PMA_DIR -type d -exec chmod 755 {} \;
sudo find $PMA_DIR -type f -exec chmod 644 {} \;

# Restart Apache to apply changes
#sudo systemctl restart apache2

}


# Function to generate DKIM key and set global variables
generate_dkim() {
    # Retrieve domain
    DOMAIN=$(retrieve_file_data /usr/local/roundcube_mail_domain.txt)

    # Ensure the domain is not empty
    if [[ -z "$DOMAIN" ]]; then
        echo "Error: No domain found in /usr/local/roundcube_mail_domain.txt"
        exit 1
    fi

    # DKIM settings
    SELECTOR="default"
    DKIM_DIR="/etc/opendkim"
    KEY_FILE="$DKIM_DIR/keys/$DOMAIN/$SELECTOR.private"
    TXT_RECORD_FILE="$DKIM_DIR/keys/$DOMAIN/$SELECTOR.txt"

    # Create necessary directories
    sudo mkdir -p "$DKIM_DIR/keys/$DOMAIN"

    # Generate DKIM key
    sudo opendkim-genkey -s $SELECTOR -d $DOMAIN -D "$DKIM_DIR/keys/$DOMAIN" -b 2048

    # Set permissions
    sudo chown opendkim:opendkim "$KEY_FILE"
    sudo chmod 600 "$KEY_FILE"

    # Output the DNS TXT record
    TXT_RECORD=$(cat "$TXT_RECORD_FILE")
    # Clean up
    sudo rm "$TXT_RECORD_FILE"
    # Reload OpenDKIM
    sudo systemctl restart opendkim
    # Output key file location
    echo "DKIM private key stored at: $KEY_FILE"
}


configure_dovecot_sasl() {
    
    echo "Performing Comprehensive Dovecot Configuration Installation"
    
    # 1. Install required packages
    apt_install dovecot-sieve dovecot-managesieved sasl2-bin
      echo "[OK]"
    echo "Configuring Dovecot services..."

    # 2. Create vmail user if not exists
    if ! id vmail >/dev/null 2>&1; then
        echo "Creating vmail user..."
        groupadd -g 5000 vmail
        useradd -g vmail -u 5000 vmail -d /var/mail/vmail -m
        chown -R vmail:vmail /var/mail/vmail
    fi
    
    # 3. Create auth directory structure
    echo "Setting up auth directory..."
    mkdir -p /var/spool/postfix/private
    chown -R postfix:postfix /var/spool/postfix/private
    chmod -R 0750 /var/spool/postfix/private
    
    # 4. Remove any existing auth socket/directory
    [ -e /var/spool/postfix/private/auth ] && rm -rf /var/spool/postfix/private/auth
    
    # 5. Configure 10-master.conf with root auth-worker (temporary)
    cat <<EOF > /etc/dovecot/conf.d/10-master.conf
service auth {
  unix_listener /var/spool/postfix/private/auth {
    mode = 0660
    user = postfix
    group = postfix
  }
}

service imap-login {
  inet_listener imap {
    port = 143
  }
  inet_listener imaps {
    port = 993
    ssl = yes
  }
}

service pop3-login {
  inet_listener pop3 {
    port = 110
  }
  inet_listener pop3s {
    port = 995
    ssl = yes
  }
}

service lmtp {
  unix_listener lmtp {
    mode = 0660
    user = postfix
    group = postfix
  }
}

service auth-worker {
  user = root
}
EOF

    # 6. Basic auth configuration
    cat <<EOF > /etc/dovecot/conf.d/10-auth.conf
disable_plaintext_auth = no
auth_mechanisms = plain login
auth_username_format = %n

!include auth-system.conf.ext
!include auth-sql.conf.ext
EOF

    # 7. Mail location configuration
    cat <<EOF > /etc/dovecot/conf.d/10-mail.conf
mail_location = maildir:/var/mail/vhosts/%d/%n
namespace inbox {
  inbox = yes
}
EOF

    # Configure SQL authentication
    cat <<EOF > /etc/dovecot/conf.d/auth-sql.conf.ext
passdb {
    driver = sql
    args = /etc/dovecot/dovecot-sql.conf.ext
}
userdb {
    driver = sql
    args = /etc/dovecot/dovecot-sql.conf.ext
}
EOF

    # Configure SQL connection
    local db_password=$(retrieve_file_data /usr/local/roundcube_db_pwd.txt)
    cat <<EOF > /etc/dovecot/dovecot-sql.conf.ext
driver = mysql
connect = host=localhost dbname=roundcubemail user=roundcube password=$db_password
default_pass_scheme = SHA512-CRYPT
password_query = SELECT username AS user, password FROM users WHERE username = '%u'
user_query = SELECT mail_host AS home, username AS user, 5000 AS uid, 5000 AS gid FROM users WHERE username = '%u'
EOF

    chgrp dovecot /etc/dovecot/dovecot-sql.conf.ext
    chmod 640 /etc/dovecot/dovecot-sql.conf.ext

echo "[OK]"

    # 8. Validate configuration
    echo "Validating configuration..."
    if ! dovecot -n; then
        echo "Configuration validation failed!"
        exit 1
    fi

    # 9. Restart Dovecot carefully
    echo "Restarting Dovecot..."
    systemctl stop dovecot
    sleep 2
    if ! systemctl start dovecot; then
        echo "Dovecot failed to start. Last error:"
        journalctl -u dovecot -n 20 --no-pager
        exit 1
    fi

    # 10. Verify socket creation
    echo "Verifying SASL socket..."
    if [ -S /var/spool/postfix/private/auth ]; then
        echo "Success! SASL socket created:"
        ls -l /var/spool/postfix/private/auth
    else
        echo "Failed to create SASL socket. Last logs:"
        journalctl -u dovecot -n 20 --no-pager
        exit 1
    fi

    # 11. Restart Postfix
    systemctl restart postfix
systemctl restart dovecot

    echo "=== DOVECOT CONFIGURATION COMPLETE ==="
}

verify_postfix_dovecot_connection() {
    echo "Verifying Postfix-Dovecot SASL connection..."
    if sudo -u postfix ls /var/spool/postfix/private/auth >/dev/null 2>&1; then
        echo "Postfix can access Dovecot auth socket - configuration OK"
    else
        echo "ERROR: Postfix cannot access Dovecot auth socket!"
        echo "Check permissions on /var/spool/postfix/private/auth"
        exit 1
    fi
}

test_sasl_authentication() {
    echo "Testing SASL authentication..."
    echo "auth plain" | nc localhost 587 | grep -q "VXNlcm5hbWU6" && \
        echo "SASL PLAIN authentication available" || \
        echo "SASL PLAIN authentication NOT available"
    
    echo "auth login" | nc localhost 587 | grep -q "VXNlcm5hbWU6" && \
        echo "SASL LOGIN authentication available" || \
        echo "SASL LOGIN authentication NOT available"
}

# Function to install Roundcube
install_roundcube() {
    local EMAIL_DOMAIN=$1
    local HOSTNAME=$2
    local ADMIN_MAILX_EMAIL=$3    
    local MYSQL_ROOT_PASSWORD=$(retrieve_file_data /usr/local/mysql_root_pwd.txt)
    local ROUNDCUBE_DB_PASSWORD=$(retrieve_file_data /usr/local/roundcube_db_pwd.txt)
    local ROUNDCUBE_DB_USER="roundcube"
    local ROUNDCUBE_DB_NAME="roundcubemail"
    local ROUNDCUBE_ADMIN_EMAIL="admin@$EMAIL_DOMAIN"
    local ROUNDCUBE_ADMIN_PASS=$(openssl rand -base64 12)

# Variables for the settings
POST_MAX_SIZE="50M"
UPLOAD_MAX_FILESIZE="50M"
MAX_EXECUTION_TIME="300"
MAX_INPUT_TIME="300"
MEMORY_LIMIT="256M"

# Path to the PHP-FPM ini file
PHP_INI_FILE="/etc/php/5.6/fpm/php.ini"

    # Update hostname and hosts file
    echo "$HOSTNAME" > /etc/hostname
    sed -i "s/127.0.0.1.*/127.0.0.1 localhost $HOSTNAME/" /etc/hosts
    hostnamectl set-hostname $HOSTNAME

        # Ensure /etc/mailname exists and update it if hostname is a valid FQDN
    # Ensure /etc/mailname exists and update it if hostname is a valid FQDN
    if [[ "$HOSTNAME" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        echo "$HOSTNAME" |  tee /etc/mailname > /dev/null
    else
        echo "Warning: '$HOSTNAME' is not a fully qualified domain name. /etc/mailname not changed."
    fi
    clear
        # Update system and install necessary packages
        echo "Installing packages needed for setup..."
        echo "."
        echo ".."
        echo "..."
        echo "....please wait...."
        # apt-get -qq update > /dev/null && apt-get -qq upgrade -y > /dev/null
        apt-get -qq update > /dev/null
        echo "System updated and upgraded successfully....[OK]"
        echo "[OK]"
        echo "Installing Software Properties..."
        apt_install software-properties-common
        echo "[OK]"
        echo "Adding PHP PPA repository..."
        LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/php -y > /dev/null 2>&1
        echo "[OK]"
        # Update package list again after adding new repository
        apt-get -qq update > /dev/null
    # Install MySQL without interactive prompts
    echo "Installing MySQL (Database server)....."
    # Install MySQL without interactive prompts
    export DEBIAN_FRONTEND=noninteractive
    debconf-set-selections <<< "mysql-server mysql-server/root_password password $MYSQL_ROOT_PASSWORD"
    debconf-set-selections <<< "mysql-server mysql-server/root_password_again password $MYSQL_ROOT_PASSWORD"
    apt-get -qq install -y mysql-server > /dev/null 

    # Create Roundcube database and user
    #echo "MySQL (Database server) warnings [OK]....."
    # Create or overwrite the .my.cnf file
    cat <<EOF > ~/.my.cnf
    [client]
    user=root
    password=$MYSQL_ROOT_PASSWORD
EOF

    # Set the appropriate permissions
    chmod 600 ~/.my.cnf

    # Create the database if it doesn't exist
    mysql -e "CREATE DATABASE IF NOT EXISTS $ROUNDCUBE_DB_NAME;" 2>/dev/null

    # Create the user if it doesn't exist and grant privileges
    mysql -e "CREATE USER IF NOT EXISTS '$ROUNDCUBE_DB_USER'@'localhost' IDENTIFIED BY '$ROUNDCUBE_DB_PASSWORD';" 2>/dev/null
    mysql -e "GRANT ALL PRIVILEGES ON $ROUNDCUBE_DB_NAME.* TO '$ROUNDCUBE_DB_USER'@'localhost';" 2>/dev/null
    mysql -e "FLUSH PRIVILEGES;" 2>/dev/null
    echo "[OK]"

    # Install required packages for Roundcube
    echo "Installing Postfix & Dovecot (Mail server)..."
    apt_install postfix mailutils dovecot-core dovecot-imapd dovecot-pop3d dovecot-mysql -y
    echo "[OK]"

    # 2. Configure Dovecot
    configure_dovecot_quota
    configure_dovecot_sasl

    # After Postfix installation
    setup_postfix_header_checks "$HOSTNAME"

    # 3. Restart services
    systemctl restart dovecot postfix

    # 4. Verify
    verify_postfix_dovecot_connection
    test_sasl_authentication


        # Install opendkim if not installed
    if ! command -v opendkim-genkey &> /dev/null; then
        echo "Installing OpenDKIM..."
        apt_install opendkim opendkim-tools
        echo "[OK]"
    fi
    echo "Installing Apache (web server)..."
    echo "[OK]"
    apt_install apache2 libapache2-mod-fcgid libapache2-mod-php8.1 libapache2-mod-php8.4 libapache2-mod-fcgid

        # Backup original configuration files
cp /etc/apache2/ports.conf /etc/apache2/ports.conf.bak
wget -qO /etc/apache2/ports.conf https://raw.githubusercontent.com/gtmylab/mailx/main/apache2/ports.conf

# Install PHP 8.1 and PHP 5.6 with FPM and required extensions
echo "Installing PHP 8.1, PHP 8.3, PHP 8.4 and PHP 5.6..."
apt_install php8.1 php8.1-fpm php8.1-cli php8.1-common php8.1-curl php8.1-mysql php8.1-xml php8.1-mbstring php8.1-zip php8.1-intl php8.1-pspell
apt_install php8.3 php8.3-fpm php8.3-cli php8.3-common php8.3-curl php8.3-mysql php8.3-xml php8.3-mbstring php8.3-zip php8.3-intl php8.3-pspell
apt_install php8.4 php8.4-fpm php8.4-cli php8.4-common php8.4-curl php8.4-mysql php8.4-xml php8.4-mbstring php8.4-zip php8.4-intl php8.4-pspell

apt_install php5.6 php5.6-fpm php5.6-cli php5.6-common php5.6-curl php5.6-mysql php5.6-xml php5.6-mbstring php5.6-zip php5.6-intl php5.6-pspell

# Enable required Apache modules
echo "Enabling Apache modules..."
a2enmod actions fcgid alias proxy_fcgi > /dev/null 2>&1
echo "[OK]"

# Check PHP-FPM service name for PHP 8.1
PHPFPM_SERVICE=$(systemctl list-units --full --all | grep php8.1-fpm | awk '{print $1}')
if [ -z "$PHPFPM_SERVICE" ]; then
    echo "PHP 8.1 FPM service not found. Please check your PHP installation."
    exit 1
fi
# Check PHP-FPM service name for PHP 8.3
PHPFPM_SERVICE=$(systemctl list-units --full --all | grep php8.3-fpm | awk '{print $1}')
if [ -z "$PHPFPM_SERVICE" ]; then
    echo "PHP 8.3 FPM service not found. Please check your PHP installation."
    exit 1
fi
# Check PHP-FPM service name for PHP 8.4
PHPFPM_SERVICE=$(systemctl list-units --full --all | grep php8.4-fpm | awk '{print $1}')
if [ -z "$PHPFPM_SERVICE" ]; then
    echo "PHP 8.4 FPM service not found. Please check your PHP installation."
    exit 1
fi

# Configure PHP-FPM for PHP 8.1
mkdir -p /etc/php/8.1/fpm/pool.d
mkdir -p /etc/php/8.3/fpm/pool.d
mkdir -p /etc/php/8.4/fpm/pool.d
mkdir -p /etc/php/5.6/fpm/pool.d
wget -qO /etc/php/8.1/fpm/pool.d/www.conf https://raw.githubusercontent.com/gtmylab/mailx/main/php8/www.conf
wget -qO /etc/php/8.3/fpm/pool.d/www.conf https://raw.githubusercontent.com/gtmylab/mailx/main/php8/3/www.conf
wget -qO /etc/php/8.4/fpm/pool.d/www.conf https://raw.githubusercontent.com/gtmylab/mailx/main/php8/4/www.conf

# Configure PHP-FPM for PHP 5.6
wget -qO /etc/php/5.6/fpm/pool.d/www.conf https://raw.githubusercontent.com/gtmylab/mailx/main/php5/www.conf

# Update the settings in the php.ini file
update_php_ini "post_max_size" "$POST_MAX_SIZE" "$PHP_INI_FILE"
update_php_ini "upload_max_filesize" "$UPLOAD_MAX_FILESIZE" "$PHP_INI_FILE"
update_php_ini "max_execution_time" "$MAX_EXECUTION_TIME" "$PHP_INI_FILE"
update_php_ini "max_input_time" "$MAX_INPUT_TIME" "$PHP_INI_FILE"
update_php_ini "memory_limit" "$MEMORY_LIMIT" "$PHP_INI_FILE"

sudo systemctl restart php8.1-fpm 2>/dev/null
sudo systemctl restart php8.3-fpm 2>/dev/null
sudo systemctl restart php8.4-fpm 2>/dev/null
sudo systemctl restart php5.6-fpm 2>/dev/null

echo "Installing additional Mailing Support..."
# Download and install
    mkdir -p  /var/www/html/mailx
    wget -qO  /var/www/html/mailx/index.php https://raw.githubusercontent.com/gtmylab/mailx/main/mailer.php
    chown -R www-data:www-data /var/www/html/mailx
    echo "[OK]"

    mkdir -p  /var/www/html/adminportal
    chown -R www-data:www-data /var/www/html/adminportal
    echo "[OK]"


    #mkdir -p  /var/www/html/apachessl
    #chown -R www-data:www-data /var/www/html/apachessl
    mkdir -p /var/www/html/.well-known/acme-challenge
    chown -R www-data:www-data /var/www/html
    #chmod -R 755 /var/www/html/apachessl

    echo "[OK]"



    # Configure Apache for Roundcube
    cat <<EOF > /etc/apache2/sites-available/roundcube.conf
    <VirtualHost *:8080>
        ServerName $HOSTNAME
        DocumentRoot /var/www/html/roundcube

        <Directory /var/www/html/roundcube/>
            Options +FollowSymlinks
            AllowOverride All
            <IfModule mod_dir.c>
                DirectoryIndex index.php
            </IfModule>
        </Directory>

        <FilesMatch \.php$>
            SetHandler "proxy:unix:/run/php/php8.1-fpm.sock|fcgi://localhost"
         </FilesMatch>

        ErrorLog \${APACHE_LOG_DIR}/roundcube_error.log
        CustomLog \${APACHE_LOG_DIR}/roundcube_access.log combined
    </VirtualHost>
EOF


    # Configure Apache for Admin Portal
    cat <<EOF > /etc/apache2/sites-available/adminportal.conf
# Non-SSL Admin Portal (Port 9090)
<VirtualHost *:9090>
    ServerName $HOSTNAME
    DocumentRoot /var/www/html/adminportal

    <Directory /var/www/html/adminportal/>
        Options +FollowSymLinks -Indexes
        AllowOverride All
        Require all granted
        
        <IfModule mod_dir.c>
            DirectoryIndex index.php
        </IfModule>
    </Directory>

    <FilesMatch \.php$>
        SetHandler "proxy:unix:/run/php/php8.4-fpm.sock|fcgi://localhost"
    </FilesMatch>

    ErrorLog ${APACHE_LOG_DIR}/adminportal_error.log
    CustomLog ${APACHE_LOG_DIR}/adminportal_access.log combined
</VirtualHost>

# SSL Admin Portal (Port 8443)
<VirtualHost *:8443>
    ServerName $HOSTNAME
    DocumentRoot /var/www/html/adminportal

    # SSL Configuration
    SSLEngine on
    SSLCertificateFile /etc/letsencrypt/live/$HOSTNAME/fullchain.pem
    SSLCertificateKeyFile /etc/letsencrypt/live/$HOSTNAME/privkey.pem
    SSLCertificateChainFile /etc/letsencrypt/live/$HOSTNAME/chain.pem

    # Security Headers
    Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
    Header always set X-Content-Type-Options "nosniff"
    Header always set X-Frame-Options "SAMEORIGIN"

    # Disable weak protocols
    SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
    SSLCipherSuite HIGH:!aNULL:!MD5:!SHA1
    SSLHonorCipherOrder on

    <Directory /var/www/html/adminportal/>
        Options +FollowSymLinks -Indexes
        AllowOverride All
        Require all granted
        
        <IfModule mod_dir.c>
            DirectoryIndex index.php
        </IfModule>
    </Directory>

    <FilesMatch \.php$>
        SetHandler "proxy:unix:/run/php/php8.4-fpm.sock|fcgi://localhost"
    </FilesMatch>

    ErrorLog ${APACHE_LOG_DIR}/adminportal_ssl_error.log
    CustomLog ${APACHE_LOG_DIR}/adminportal_ssl_access.log combined
</VirtualHost>
EOF

    # Configure Apache for Mailx
    cat <<EOF > /etc/apache2/sites-available/mailx.conf
    <VirtualHost *:8081>
        ServerName $EMAIL_DOMAIN
        DocumentRoot /var/www/html/mailx

        <Directory /var/www/html/mailx/>
            Options +FollowSymlinks
            AllowOverride All
            <IfModule mod_dir.c>
                DirectoryIndex index.php
            </IfModule>
        </Directory>

        <FilesMatch \.php$>
            SetHandler "proxy:unix:/run/php/php5.6-fpm.sock|fcgi://localhost"
        </FilesMatch>

        ErrorLog \${APACHE_LOG_DIR}/mailx_error.log
        CustomLog \${APACHE_LOG_DIR}/mailx_access.log combined
    </VirtualHost>
EOF

    # Configure Apache for PhPmyadmin
    cat <<EOF > /etc/apache2/sites-available/phpmyadmin.conf
    <VirtualHost *:8082>
        ServerName $HOSTNAME
        DocumentRoot /var/www/html/phpmyadmin

        <Directory /var/www/html/phpmyadmin/>
            Options +FollowSymlinks
            AllowOverride All
            <IfModule mod_dir.c>
                DirectoryIndex index.php
            </IfModule>
        </Directory>

        <FilesMatch \.php$>
            SetHandler "proxy:unix:/run/php/php8.1-fpm.sock|fcgi://localhost"
         </FilesMatch>

        ErrorLog \${APACHE_LOG_DIR}/phpmyadmin_error.log
        CustomLog \${APACHE_LOG_DIR}/phpmyadmin_access.log combined
    </VirtualHost>
EOF
    # Disable old PHP version and enable PHP 8.1
    a2enmod php8.1 > /dev/null 2>&1
    #systemctl restart apache2
    echo "Enabling site SSL..."
    #a2ensite apachessl.conf > /dev/null 2>&1
    echo "Enabling site AdminPortal Site..."
    a2ensite adminportal.conf > /dev/null 2>&1
    echo "[OK]"
    # Enable the sites and restart Apache
    echo "Enabling site roundcube..."
    a2ensite roundcube.conf > /dev/null 2>&1
    echo "[OK]"
    echo "Enabling site mailx..."
    a2ensite mailx.conf > /dev/null 2>&1
    echo "[OK]"
    echo "Enabling site phpmyadmin..."
    a2ensite phpmyadmin.conf > /dev/null 2>&1
    echo "[OK]"
        # Download and install Phpmyadmin
    setup_phpmyadmin
    echo "[OK]"


    manage_ssl_certificates install $HOSTNAME
    sudo a2enmod ssl
    sudo a2enmod headers rewrite
    systemctl restart apache2
    systemctl reload apache2
systemctl restart apache2 postfix dovecot
    systemctl restart apache2
    # Download and install Roundcube
    echo "Downloading and installing Roundcube..."
    cd /var/www/html
    wget -q https://github.com/roundcube/roundcubemail/releases/download/1.5.0/roundcubemail-1.5.0-complete.tar.gz
    tar -xzf roundcubemail-1.5.0-complete.tar.gz
    mv roundcubemail-1.5.0 roundcube
    chown -R www-data:www-data /var/www/html/roundcube
    cd roundcube
    cp config/config.inc.php.sample config/config.inc.php
    echo "[OK]"
    echo "Configuring Roundcube..."

    # Configure Roundcube
        # Check if mail_domain exists and add if not

    sed -i "s/\$config\['db_dsnw'\].*/\$config\['db_dsnw'\] = 'mysql:\/\/$ROUNDCUBE_DB_USER:$ROUNDCUBE_DB_PASSWORD@localhost\/$ROUNDCUBE_DB_NAME';/" config/config.inc.php
    sed -i "s/\$config\['default_host'\].*/\$config\['default_host'\] = 'localhost';/" config/config.inc.php
    sed -i "s/\$config\['smtp_server'\].*/\$config\['smtp_server'\] = 'localhost';/" config/config.inc.php
    sed -i "s/\$config\['support_url'\].*/\$config\['support_url'\] = 'mailto:$ROUNDCUBE_ADMIN_EMAIL';/" config/config.inc.php
    sed -i "s/\$config\['smtp_port'\].*/\$config\['smtp_port'\] = 25;/" config/config.inc.php
    sed -i "s/\$config\['smtp_user'\].*/\$config\['smtp_user'\] = '';/" config/config.inc.php
    sed -i "s/\$config\['smtp_pass'\].*/\$config\['smtp_pass'\] = '';/" config/config.inc.php
    sed -i "/\$config\['smtp_server'\]/i \$config['mail_domain'] = '$EMAIL_DOMAIN';" config/config.inc.php
    echo "[OK]"

    echo "Initialize Roundcube database schema..."

    # Initialize Roundcube database schema
    sudo -u www-data ./bin/initdb.sh --dir=./SQL --create
    echo "[OK]"

    # Update Postfix configurations
    update_postfix_config "$EMAIL_DOMAIN" "$HOSTNAME"

   # Call the generate_dkim function
    generate_dkim

    # Add First User
    add_roundcube_user "admin" "$ROUNDCUBE_ADMIN_PASS" 1000

 # Send notification to admin email
    send_notification_email "$ADMIN_MAILX_EMAIL" "http://$HOSTNAME:8080" "roundcube" "$ROUNDCUBE_ADMIN_PASS" "http://$EMAIL_DOMAIN:8081" "$TXT_RECORD" "$SELECTOR" "http://$HOSTNAME:8082"

    # Output Roundcube admin details
    echo "Roundcube admin email: $ROUNDCUBE_ADMIN_EMAIL"
    echo "Roundcube admin password: $ROUNDCUBE_ADMIN_PASS"
    echo ""
    echo ""
    echo "MailX Installation Successful !"

}


# Function to add email user with proper integration
add_roundcube_user() {
    local username=$1
    local password=$2
    local quota=${3:-1000}  # Default 1GB quota
    local domain_input=$4

    # Get available domains
    local domains=($(cat /usr/local/roundcube_mail_domain.txt))
    local default_domain="${domains[0]}"
    local selected_domain="$default_domain"

    # Domain selection
    if [[ -n "$domain_input" ]]; then
        if [[ " ${domains[@]} " =~ " ${domain_input} " ]]; then
            selected_domain="$domain_input"
        else
            echo "Error: Domain not configured. Available domains: ${domains[@]}"
            return 1
        fi
    fi

    local email="$username@$selected_domain"
    local maildir="/var/mail/vhosts/$selected_domain/$username"

    # Check for existing user
    if grep -q "^$email" /etc/postfix/virtual 2>/dev/null; then
        echo "Error: User $email already exists"
        return 1
    fi

    # Create system user (for authentication)
  #  useradd -r -u 5000 -g 5000 -d "$maildir" -s /bin/false "$username"
   # echo "$username:$password" | chpasswd

       # Create system user if not exists
    if ! id "$username" >/dev/null 2>&1; then
        useradd -m -s /bin/bash "$username"
        echo "$username:$password" | chpasswd
        echo "System user $username created."
    fi

    # Create mail directory
    mkdir -p "$maildir/"{cur,new,tmp}
    chown -R vmail:vmail "$maildir"
    chmod -R 770 "$maildir"

    # Set quota
    echo "quota_rule = *:storage=${quota}M" > "$maildir/.dovecot.quota"
    chown vmail:vmail "$maildir/.dovecot.quota"

    # Update Postfix maps
    echo "$email $username" >> /etc/postfix/virtual
    postmap /etc/postfix/virtual

    # Add to Roundcube database
    local db_password=$(retrieve_file_data /usr/local/roundcube_db_pwd.txt)
    local prefs='a:6:{s:14:"compose_extwin";i:1;s:10:"htmleditor";i:1;s:11:"mdn_default";b:0;s:11:"dsn_default";b:0;s:13:"sig_separator";b:0;s:25:"compose_save_localstorage";i:1;}'

    mysql -u roundcube -p"$db_password" roundcubemail <<EOF
INSERT INTO users (username, mail_host, created, last_login, language, preferences)
VALUES ('$email', 'localhost', NOW(), NOW(), 'en_GB', '$prefs')
ON DUPLICATE KEY UPDATE preferences='$prefs';

INSERT INTO identities (user_id, changed, del, standard, name, organization, email, \`reply-to\`, signature, html_signature)
SELECT user_id, NOW(), 0, 1, '$username', '$selected_domain', '$email', '$email', '', 1
FROM users WHERE username = '$email'
ON DUPLICATE KEY UPDATE name='$username', organization='$selected_domain';
EOF

    systemctl restart postfix dovecot

    echo "User $email created successfully"
    echo "Maildir: $maildir"
    echo "Quota: ${quota}MB"
}

# Function to verify Postfix and Dovecot integration
verify_mail_integration() {
    echo "Verifying mail system integration..."
    
    # Test Postfix configuration
    if ! postfix check; then
        echo "Error: Postfix configuration check failed"
        return 1
    fi
    
    # Test Dovecot configuration
    if ! doveconf -n; then
        echo "Error: Dovecot configuration check failed"
        return 1
    fi
    
    # Test database connection
    local db_password=$(retrieve_file_data /usr/local/roundcube_db_pwd.txt)
    if ! mysql -u roundcube -p"$db_password" roundcubemail -e "SELECT 1" >/dev/null; then
        echo "Error: Database connection failed"
        return 1
    fi
    
    echo "Mail system integration verified successfully"
}


# Enhanced user creation with duplicate checking
# Enhanced user creation with better error handling
add_roundcube_user_OLD() {
    local username=$1
    local password=$2
    local quota_size=${3:-1000}  # Default 1000MB quota
    local domain_input=$4
    local domains=($(cat /usr/local/roundcube_mail_domain.txt))
    local default_domain="${domains[0]}"
    local selected_domain="$default_domain"
    local email
    local maildir_path
    
    # Domain selection logic
    if [[ -n "$domain_input" ]]; then
        if [[ " ${domains[@]} " =~ " ${domain_input} " ]]; then
            selected_domain="$domain_input"
        else
            echo "Error: Domain '$domain_input' not configured. Available domains:"
            printf ' - %s\n' "${domains[@]}"
            return 1
        fi
    fi

    email="$username@$selected_domain"
    maildir_path="/var/mail/vhosts/$selected_domain/$username"

    # Check for duplicate user
    if [ -f "/etc/postfix/virtual" ] && grep -q "^$email" /etc/postfix/virtual; then
        echo "Error: Email $email already exists in Postfix virtual maps."
        return 1
    fi

    # Create domain directory if it doesn't exist
    if [ ! -d "/var/mail/vhosts/$selected_domain" ]; then
        mkdir -p "/var/mail/vhosts/$selected_domain"
        chown vmail:vmail "/var/mail/vhosts/$selected_domain"
        chmod 770 "/var/mail/vhosts/$selected_domain"
    fi

    # Create system user if not exists
    if id "$username" >/dev/null 2>&1; then
        echo "Warning: System user $username already exists (will be reused)."
    else
        # Create user with proper home directory first
        useradd -m -s /bin/bash -d "$maildir_path" "$username"
        if [ $? -ne 0 ]; then
            echo "Error: Failed to create system user $username"
            return 1
        fi
        echo "$username:$password" | chpasswd
        echo "Created system user $username"
    fi

    # Create mail directory structure
    mkdir -p "$maildir_path/"{cur,new,tmp,.cache}
    chown -R vmail:vmail "$maildir_path"
    chown -R "$username:$username" "$maildir_path"  # Also ensure user has access
    chmod -R 770 "$maildir_path"

    # Set quota
    echo "quota_rule = *:storage=${quota_size}M" > "$maildir_path/.dovecot.quota"
    chown vmail:vmail "$maildir_path/.dovecot.quota"

    # Update Postfix virtual maps (create file if doesn't exist)
    touch /etc/postfix/virtual
    echo "$email $username" >> /etc/postfix/virtual
    postmap /etc/postfix/virtual

    # Database operations
    local ROUNDCUBE_DB_PASSWORD=$(retrieve_file_data /usr/local/roundcube_db_pwd.txt)
    local ROUNDCUBE_PREFERENCE='a:6:{s:14:"compose_extwin";i:1;s:10:"htmleditor";i:1;s:11:"mdn_default";b:0;s:11:"dsn_default";b:0;s:13:"sig_separator";b:0;s:25:"compose_save_localstorage";i:1;}'


    # Insert new user and retrieve the auto-incremented ID
    USER_ID=$(mysql $ROUNDCUBE_DB_NAME -se "
    INSERT INTO users (username, mail_host, created, last_login, language, preferences) VALUES ('$username', 'localhost', NOW(), NOW(), 'en_GB', '$ROUNDCUBE_PREFERENCE');
    SELECT LAST_INSERT_ID();
    ")

    # Check if USER_ID was retrieved successfully
    if [ -z "$USER_ID" ]; then
        echo "Failed to retrieve USER_ID. Aborting."
        exit 1
    fi

    # Insert into identities table
    mysql $ROUNDCUBE_DB_NAME -e "
    INSERT INTO identities (user_id, changed, del, standard, name, organization, email, \`reply-to\`, signature, html_signature) 
    VALUES ('$USER_ID', NOW(), '0', '1', '$username', 'localhost', '$email', '$email', '', '1');
    "

    # Check if user already exists in database
  #  local existing_user=$(mysql -u "$ROUNDCUBE_DB_USER" -p"$ROUNDCUBE_DB_PASSWORD" roundcubemail -sNe "SELECT username FROM users WHERE username = '$email'" 2>/dev/null)
  #  if [ -n "$existing_user" ]; then
 #       echo "Warning: User $email already exists in Roundcube database (updating instead)."
  #      mysql -u "$ROUNDCUBE_DB_USER" -p"$ROUNDCUBE_DB_PASSWORD" roundcubemail -e "UPDATE users SET mail_host='localhost', preferences='$ROUNDCUBE_PREFERENCE' WHERE username='$email'"
  #  else
 #       mysql -u "$ROUNDCUBE_DB_USER" -p"$ROUNDCUBE_DB_PASSWORD" roundcubemail -e "
  #      INSERT INTO users (username, mail_host, created, last_login, language, preferences) 
  #      VALUES ('$email', 'localhost', NOW(), NOW(), 'en_GB', '$ROUNDCUBE_PREFERENCE');
  #      "
   # fi

    # Update identities
   # mysql -u "$ROUNDCUBE_DB_USER" -p"$ROUNDCUBE_DB_PASSWORD" roundcubemail -e "
  #  INSERT INTO identities (user_id, changed, del, standard, name, organization, email, \`reply-to\`, signature, html_signature) 
  #  SELECT user_id, NOW(), 0, 1, '$username', '$selected_domain', '$email', '$email', '', 1 
  #  FROM users WHERE username = '$email'
  #  ON DUPLICATE KEY UPDATE name='$username', organization='$selected_domain';
 #   "

    systemctl restart postfix dovecot

    echo "==============================================="
    echo "USER CREATION SUCCESSFUL"
    echo "Email:        $email"
    echo "Username:     $username"
    echo "Domain:       $selected_domain"
    echo "Quota:        ${quota_size}MB"
    echo "Maildir:      $maildir_path"
    echo "==============================================="
    return 0
}



# Function to uninstall Roundcube, including database and user
uninstall_roundcube() {
    local MYSQL_ROOT_PASSWORD
    MYSQL_ROOT_PASSWORD=$(retrieve_file_data /usr/local/mysql_root_pwd.txt)

    # Drop Roundcube database and user
    mysql -e "DROP DATABASE IF EXISTS roundcubemail;"
    mysql -e "DROP USER 'roundcube'@'localhost';"

    # Remove Roundcube directory
    rm -rf /var/www/html/roundcube

    echo "Roundcube uninstallation completed..."
}

# Function to uninstall Postfix, MySQL, and Roundcube
uninstall_all() {

    echo "Uninstalling Postfix, MySQL, and Roundcube..."
    # Call function to uninstall Roundcube database and user
    uninstall_roundcube

    # Stop services
    systemctl stop postfix
    systemctl stop apache2
    systemctl stop mysql

    # Remove packages
    sudo apt-get -y remove --purge postfix apache2 php* roundcube mysql-server mysql-client mysql-common mysql-server-core-* mysql-client-core-* > /dev/null
    sudo apt-get -y remove --purge mysql-server mysql-client mysql-common > /dev/null

    # Remove configuration files
    sudo rm -rf /var/lib/mysql
    sudo rm -rf /etc/mysql /var/lib/mysql /var/log/mysql*
    rm -rf /etc/postfix
    rm -rf /etc/mysql
    rm -rf /etc/apache2
    rm -rf /etc/roundcube
    rm -rf /var/www/html/roundcube
    rm -rf /var/www/html/phpmyadmin
    rm -rf /var/www/html/mailx
    sudo deluser mysql
    sudo delgroup mysql
    echo '[OK]'
    echo "Cleaning up system MailX System files..."
    sudo apt-get -y clean > /dev/null
    sudo apt-get -y autoremove > /dev/null
    sudo apt-get -y autoclean > /dev/null

    echo '[OK]'

    echo "Uninstallation completed."
}


# Function to manage email domains
manage_email_domains() {
    local ACTION=$1
    local DOMAIN=$2
    
    case "$ACTION" in
        add)
            # Validate domain format
            if [[ ! "$DOMAIN" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
                echo "Error: '$DOMAIN' is not a valid domain format."
                return 1
            fi

            # Check if domain already exists
            if grep -qFx "$DOMAIN" /usr/local/roundcube_mail_domain.txt; then
                echo "Domain $DOMAIN already exists."
                return 0
            fi

            echo "Adding $DOMAIN to mail server configuration..."
            echo "$DOMAIN" >> /usr/local/roundcube_mail_domain.txt

            # Update Postfix configuration
            sed -i "/^mydestination =/ s/$/, $DOMAIN/" /etc/postfix/main.cf
            sed -i "/^virtual_mailbox_domains =/ s/$/, $DOMAIN/" /etc/postfix/main.cf
            echo "$DOMAIN OK" >> /etc/postfix/virtual_mailbox_domains
            postmap /etc/postfix/virtual_mailbox_domains

            # Create mail directory
            mkdir -p "/var/mail/vhosts/$DOMAIN"
            chown -R vmail:vmail "/var/mail/vhosts/$DOMAIN"
            chmod -R 770 "/var/mail/vhosts/$DOMAIN"

            systemctl restart postfix dovecot
            echo "Successfully added $DOMAIN"
            ;;

        remove)
            # Check if domain exists
            if ! grep -qFx "$DOMAIN" /usr/local/roundcube_mail_domain.txt; then
                echo "Error: Domain $DOMAIN not found."
                return 1
            fi

            # Prevent removal if it's the last domain
            if [ $(wc -l < /usr/local/roundcube_mail_domain.txt) -eq 1 ]; then
                echo "Error: Cannot remove the last remaining domain."
                return 1
            fi

            echo "Removing $DOMAIN from mail server..."

            # Remove from domain list
            sed -i "/^$DOMAIN$/d" /usr/local/roundcube_mail_domain.txt

            # Update Postfix configuration
            sed -i "/$DOMAIN/d" /etc/postfix/main.cf
            sed -i "/$DOMAIN/d" /etc/postfix/virtual_mailbox_domains
            postmap /etc/postfix/virtual_mailbox_domains

            # Archive mail directory instead of deleting
            mv "/var/mail/vhosts/$DOMAIN" "/var/mail/archived_vhosts/$DOMAIN_$(date +%Y%m%d)"

            systemctl restart postfix dovecot
            echo "Successfully removed $DOMAIN (mail data archived)"
            ;;

        list)
            echo "Configured email domains:"
            cat /usr/local/roundcube_mail_domain.txt
            ;;

        *)
            echo "Usage: manage_email_domains [add|remove|list] [domain]"
            return 1
            ;;
    esac
}


# Function to send email notification
send_notification_email() {
    local recipient_email=$1
    local roundcube_url=$2
    local roundcube_db_user=$3
    local roundcube_db_password=$4
    local mailx_url=$5
    local SELECTOR=$6
    local TXT_RECORD=$7
    local db_url=$8
    local DOMAIN=$(retrieve_file_data /usr/local/roundcube_mail_domain.txt)

    local subject="Roundcube Installation Successful"
    local body="Dear User,

The Roundcube installation was successful. Here are the details:

Roundcube Database Username: $roundcube_db_user
Roundcube Database Password: $roundcube_db_password

Please keep these details secure.

You can now access:
Webmail URL via: $roundcube_url
Mailx URL via: $mailx_url 
DB URL via: $db_url 

Add the following TXT record to DNS settings:

Host: $SELECTOR._domainkey.$DOMAIN
Value: $TXT_RECORD


Best regards,
Your Server Team"

    echo "$body" | mail -s "$subject" "$recipient_email"
}

# Function to send welcome email to user
send_welcome_email() {

    local recipient_email=$1
    local roundcube_user=$2

    local subject="Welcome to Roundcube Webmail, $roundcube_user"
    local body="Dear User,\n\nCongratulations! 
    Your Roundcube email has been successfully set up.
    \n\nHere are your login details:\n\n
    Email Address: $recipient_email\n
    Username: $roundcube_user\n
    You can access your Roundcube webmail interface anytime\n\n
    Thank you,\nAdmin Team"

    echo -e "$body" | mail -s "$subject" "$recipient_email"
}


# Function to manage Let's Encrypt SSL certificates
manage_ssl_certificates() {
    local action=$1
    local domain=${2:-$(retrieve_file_data /usr/local/roundcube_mail_domain.txt)}
    local webroot="/var/www/html"

    case "$action" in
        install)
            
            # Install certbot if not exists
            if ! command -v certbot &> /dev/null; then
             echo "Installing packages needed for Let's Encrypt SSL certificate..."
            echo "."
            echo ".."
            echo "..."
            echo "....please wait...."
            apt-get -qq update > /dev/null
                apt_install certbot python3-certbot-apache
            fi

            # Create webroot if not exists
            mkdir -p "$webroot/.well-known/acme-challenge"
            echo "Installing Let's Encrypt SSL certificate for $domain..."

            # Obtain certificate
            certbot certonly --webroot -w "$webroot" -d "$domain" -d "mail.$domain" \
                --non-interactive --agree-tos \
                --email admin@$domain \
                --keep-until-expiring
            
            # Configure Postfix/Dovecot to use the cert
            configure_ssl_services "$domain"
            
            # Setup automatic renewal
            setup_ssl_renewal
            echo "[OK]"

            ;;

        renew)
            echo "Renewing SSL certificates..."
            certbot renew --quiet --post-hook "systemctl reload postfix dovecot apache2"
            ;;

        change)
            local new_domain=$2
            if [[ -z "$new_domain" ]]; then
                echo "Error: New domain not specified"
                return 1
            fi
            
            echo "Changing SSL certificate from $domain to $new_domain..."
            
            # Obtain new certificate
            certbot certonly --webroot -w "$webroot" -d "$new_domain" -d "mail.$new_domain" \
                --non-interactive --agree-tos \
                --email admin@$new_domain \
                --keep-until-expiring \
                --force-renewal
            
            # Update services
            configure_ssl_services "$new_domain"
            ;;

        *)
            echo "Usage: manage_ssl_certificates [install|renew|change newdomain.com]"
            return 1
            ;;
    esac
}

# Helper function to configure services to use SSL
configure_ssl_services() {
    local domain=$1
    local cert_path="/etc/letsencrypt/live/$domain"
    
    echo "Configuring services to use SSL certificate for $domain..."
    
    # Apache configuration
    sed -i "s|SSLCertificateFile.*|SSLCertificateFile $cert_path/fullchain.pem|" /etc/apache2/sites-available/default-ssl.conf
    sed -i "s|SSLCertificateKeyFile.*|SSLCertificateKeyFile $cert_path/privkey.pem|" /etc/apache2/sites-available/default-ssl.conf
    
    # Postfix configuration
    postconf -e "smtpd_tls_cert_file=$cert_path/fullchain.pem"
    postconf -e "smtpd_tls_key_file=$cert_path/privkey.pem"
    
    # Dovecot configuration
    sed -i "s|ssl_cert =.*|ssl_cert = <$cert_path/fullchain.pem|" /etc/dovecot/conf.d/10-ssl.conf
    sed -i "s|ssl_key =.*|ssl_key = <$cert_path/privkey.pem|" /etc/dovecot/conf.d/10-ssl.conf
    
    # Restart services
    #systemctl restart apache2 postfix dovecot
}

# Setup automatic renewal
setup_ssl_renewal() {
    # Create renewal script
    cat << 'EOF' > /usr/local/bin/ssl_renewal.sh
#!/bin/bash
certbot renew --quiet --post-hook "systemctl reload postfix dovecot apache2"
EOF
    
    chmod +x /usr/local/bin/ssl_renewal.sh
    
    # Add cron job (runs daily at 3am, checks 5 days before expiry)
    (crontab -l 2>/dev/null; echo "0 3 * * * /usr/local/bin/ssl_renewal.sh") | crontab -
    
    echo "Automatic SSL renewal configured."
}



# Function to send welcome email to user
send_test_message() {

    # Install mailutils if not already installed
if ! dpkg -l | grep -q mailutils; then
    apt-get update
    apt-get install -y mailutils
fi

    local email_to=$1
    local email_subject=$2
    local email_body=$3
    local email_domain=$(retrieve_file_data /usr/local/roundcube_mail_domain.txt)

    echo -e "$email_body" | mail -s "$email_subject" -a "From: admin@$email_domain" "$email_to"
echo "Test mail sent to $email_to"

}

# Function to change domain hostname and update Postfix configuration
change_domain_hostname() {
    local old_domain=$(retrieve_file_data /usr/local/roundcube_mail_domain.txt)
    local old_hostname=$(hostname)
    
    echo "Current Domain: $old_domain"
    echo "Current Hostname: $old_hostname"
    echo
    
    # Get new domain and hostname
    read -p "Enter new email domain (e.g., example.com): " new_domain
    read -p "Enter new hostname (e.g., mail.example.com): " new_hostname
    
    # Validate inputs
    if [[ -z "$new_domain" || -z "$new_hostname" ]]; then
        echo "Error: Both domain and hostname are required."
        return 1
    fi
    
    if [[ ! "$new_hostname" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        echo "Error: '$new_hostname' is not a fully qualified domain name."
        return 1
    fi
    
    echo
    echo "You are about to change:"
    echo "Domain: $old_domain → $new_domain"
    echo "Hostname: $old_hostname → $new_hostname"
    read -p "Are you sure you want to proceed? (y/n): " confirm
    
    if [[ "$confirm" != "y" ]]; then
        echo "Operation cancelled."
        return 0
    fi
    
    echo "Starting domain/hostname change process..."
    
    # 1. Update system hostname
    echo "$new_hostname" > /etc/hostname
    hostnamectl set-hostname "$new_hostname"
    sed -i "s/$old_hostname/$new_hostname/g" /etc/hosts
    
    # 2. Update mailname
    echo "$new_hostname" > /etc/mailname
    
    # 3. Update stored domain
    echo "$new_domain" > /usr/local/roundcube_mail_domain.txt
    
    # 4. Update Postfix configuration
    sed -i "s/$old_domain/$new_domain/g" /etc/postfix/main.cf
    sed -i "s/$old_hostname/$new_hostname/g" /etc/postfix/main.cf
    
    # 5. Update header_checks file
    if [ -f "/etc/postfix/header_checks" ]; then
        sed -i "s/$old_hostname/$new_hostname/g" /etc/postfix/header_checks
    else
        setup_postfix_header_checks "$new_hostname"
    fi
    
    # 6. Update Roundcube configuration
    if [ -f "/var/www/html/roundcube/config/config.inc.php" ]; then
        sed -i "s/$old_domain/$new_domain/g" /var/www/html/roundcube/config/config.inc.php
        sed -i "s/mail_domain'] = .*/mail_domain'] = '$new_domain';/" /var/www/html/roundcube/config/config.inc.php
    fi
    
    # 7. Update Apache configurations
    for config_file in /etc/apache2/sites-available/*.conf; do
        sed -i "s/$old_domain/$new_domain/g" "$config_file"
        sed -i "s/$old_hostname/$new_hostname/g" "$config_file"
    done
    
    # 8. Regenerate DKIM keys for new domain
    generate_dkim
    
    # 9. Restart services
    echo "Restarting services..."
    restart_service postfix
    restart_service dovecot
    restart_service apache2
    restart_service opendkim

    manage_ssl_certificates change "$new_domain"

    
    echo
    echo "Domain and hostname changed successfully!"
    echo "New Domain: $new_domain"
    echo "New Hostname: $new_hostname"
    echo
    echo "Note: You may need to update your DNS records and SSL certificates."
}

setup_postfix_header_checks() {
    local hostname=$1
    
    echo "Configuring Postfix header checks..."
    
    # Create header_checks file
    cat <<EOF > /etc/postfix/header_checks
/^Received: from \S+ \(.*\[.*\]\)/ REPLACE Received: from $hostname (localhost [127.0.0.1])
/^X-Originating-IP:/ IGNORE
EOF
    
    # Add to main.cf if not already present
    if ! grep -q "header_checks" /etc/postfix/main.cf; then
        echo "header_checks = regexp:/etc/postfix/header_checks" >> /etc/postfix/main.cf
    fi
    
    # Set proper permissions
    chmod 644 /etc/postfix/header_checks
    
    echo "Postfix header checks configured successfully."
}

# Function to set custom SMTP port for Postfix
set_postfix_custom_port() {
    local current_port=$(postconf -d smtpd_port | awk -F'= ' '{print $2}')
    local new_port
    
    echo "Current Postfix SMTP port: $current_port"
    echo
    
    # Check if port 25 is blocked
    echo "Testing if port 25 is blocked..."
    if timeout 5 telnet localhost 25 &>/dev/null; then
        echo "Port 25 appears to be open. No need to change ports."
        read -p "Do you still want to change to a custom port? (y/n): " force_change
        if [[ "$force_change" != "y" ]]; then
            return 0
        fi
    else
        echo "Port 25 appears to be blocked."
    fi
    
    # Get new port number
    while true; do
        read -p "Enter new SMTP port number (recommended 587 or 465): " new_port
        if [[ "$new_port" =~ ^[0-9]+$ ]] && [ "$new_port" -ge 1 ] && [ "$new_port" -le 65535 ]; then
            if [ "$new_port" -eq 25 ]; then
                echo "Cannot use port 25 (it's blocked). Please choose another port."
                continue
            fi
            if [ "$new_port" -le 1024 ] && [ "$(id -u)" != "0" ]; then
                echo "Ports below 1024 require root privileges."
                continue
            fi
            break
        else
            echo "Invalid port number. Please enter a number between 1 and 65535."
        fi
    done
    
    echo
    echo "Changing Postfix SMTP port from $current_port to $new_port..."
    
    # Backup current Postfix configuration
    echo "Backing up current Postfix configuration..."
    cp /etc/postfix/master.cf /etc/postfix/master.cf.bak
    cp /etc/postfix/main.cf /etc/postfix/main.cf.bak
    
    # Update master.cf - remove any existing custom port entries
    echo "Updating Postfix master.cf..."
    sed -i '/^smtp.*inet.*smtpd/d' /etc/postfix/master.cf
    sed -i '/^submission.*inet.*smtpd/d' /etc/postfix/master.cf
    sed -i '/^smtps.*inet.*smtpd/d' /etc/postfix/master.cf
    
    # Add new port configuration to master.cf
    cat <<EOF >> /etc/postfix/master.cf
# Custom SMTP port
${new_port}      inet  n       -       y       -       -       smtpd
  -o syslog_name=postfix/smtp-custom
  -o smtpd_tls_security_level=may
  -o smtpd_sasl_auth_enable=yes
  -o smtpd_client_restrictions=permit_sasl_authenticated,reject
EOF
    
    # Update main.cf
    echo "Updating Postfix main.cf..."
    postconf -e "smtpd_port=$new_port"
    postconf -e "alternate_smtp_ports=$new_port"
    
    # Update Roundcube configuration if exists
    if [ -f "/var/www/html/roundcube/config/config.inc.php" ]; then
        echo "Updating Roundcube configuration..."
        sed -i "s/\$config\['smtp_port'\] = .*/\$config\['smtp_port'\] = $new_port;/" /var/www/html/roundcube/config/config.inc.php
    fi
    
    # Update firewall rules
    if command -v ufw &>/dev/null; then
        echo "Updating UFW firewall rules..."
        ufw allow "$new_port"/tcp
        ufw delete allow 25/tcp 2>/dev/null || true
    elif command -v firewall-cmd &>/dev/null; then
        echo "Updating firewalld rules..."
        firewall-cmd --permanent --add-port="$new_port"/tcp
        firewall-cmd --permanent --remove-port=25/tcp
        firewall-cmd --reload
    fi
    
    # Restart Postfix
    echo "Restarting Postfix..."
    restart_service postfix
    
    echo
    echo "Postfix SMTP port successfully changed to $new_port"
    echo "You may need to:"
    echo "1. Update your DNS records (MX records may need to point to the new port)"
    echo "2. Update email client configurations"
    echo "3. Update any firewall rules on your network perimeter"
    echo "4. Update port forwarding rules if behind NAT"
}

# Function to remove a user
remove_email_user() {
    local email=$1
    local username=$(echo "$email" | cut -d@ -f1)
    local domain=$(echo "$email" | cut -d@ -f2)

    # Verify domain exists
    if ! grep -qFx "$domain" /usr/local/roundcube_mail_domain.txt; then
        echo "Error: Domain $domain not configured."
        return 1
    fi

    # Remove from Postfix
    sed -i "/^$email/d" /etc/postfix/virtual
    postmap /etc/postfix/virtual

    # Remove from Roundcube database
    mysql roundcubemail -e "DELETE FROM users WHERE username = '$email'"
    mysql roundcubemail -e "DELETE FROM identities WHERE email = '$email'"

    # Archive user data instead of deleting
    local archive_dir="/var/mail/archived_users/$domain/$username_$(date +%Y%m%d)"
    mkdir -p "$archive_dir"
    mv "/var/mail/vhosts/$domain/$username" "$archive_dir"

    # Keep system user but disable login
    if id "$username" >/dev/null 2>&1; then
        usermod -L -s /sbin/nologin "$username"
        echo "System user $username disabled (login locked)"
    fi

    systemctl restart postfix dovecot
    echo "Successfully removed user $email (data archived to $archive_dir)"
}

clear

# Main script starts here
echo "=== MailX Management Console ==="

# Check if script is run with root privileges
if [ "$(id -u)" != "0" ]; then
    echo "Error: This script must be run as root."
    exit 1
fi

# Select an option
echo "Select an option:"
echo "1. Install MailX"
echo "2. Add Email User"
echo "3. Remove Email User"
echo "4. Add Email Domain"
echo "5. Remove Email Domain"
echo "6. Send Test Email"
echo "7. Change SMTP Port"
echo "8. Change Domain/Hostname"
echo "9. Uninstall Roundcube"
echo "10. Uninstall MailX (Complete Removal)"

read -p "Enter your choice (1-10): " choice

case $choice in
    1)
        clear
        echo "Welcome to the MailX Server Installation Script!"
        echo
        # Loop until all required fields are entered correctly
        while true; do
            # Ask for user input
            read -p "Please enter the email domain (e.g., example.com): " EMAIL_DOMAIN
            read -p "Please enter the hostname (e.g., mail.example.com): " HOSTNAME
            read -p "Please enter the admin email address: " ADMIN_MAILX_EMAIL

            echo

            # Validate inputs
            if [[ -z "$EMAIL_DOMAIN" || -z "$HOSTNAME" || -z "$ADMIN_MAILX_EMAIL" ]]; then
                echo "Error: All fields are mandatory. Please provide values for all."
                continue
            fi

            # Validate hostname
            if [[ ! "$HOSTNAME" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
                echo "Error: '$HOSTNAME' is not a fully qualified domain name."
                continue
            fi

            # Display the entered information and ask for confirmation
            echo "You have entered:"
            echo "Email Domain: $EMAIL_DOMAIN"
            echo "Hostname: $HOSTNAME"
            echo "Admin Email: $ADMIN_MAILX_EMAIL"
            echo
            read -p "Is this information correct? (y/n): " CONFIRM

            if [ "$CONFIRM" = "y" ]; then
                break
            else
                echo "Please re-enter the information."
            fi
        done

        # Generate and store passwords
        MYSQL_ROOT_PASSWORD=$(generate_password 16)
        ROUNDCUBE_DB_PASSWORD=$(generate_password 16)
        echo "$MYSQL_ROOT_PASSWORD" > /usr/local/mysql_root_pwd.txt
        echo "$ROUNDCUBE_DB_PASSWORD" > /usr/local/roundcube_db_pwd.txt
        echo "$EMAIL_DOMAIN" > /usr/local/roundcube_mail_domain.txt

        # Install Roundcube
        install_roundcube "$EMAIL_DOMAIN" "$HOSTNAME" "$ADMIN_MAILX_EMAIL"
        ;;

    2)
        read -p "Enter username (without domain): " username
        read -sp "Enter password: " password
        echo
        read -p "Enter domain (leave blank for default): " domain
        read -p "Enter quota in MB (default 1000): " quota

        # Call function to add user
        add_roundcube_user "$username" "$password" "${quota:-1000}" "$domain"
        ;;

    3)
        read -p "Enter full email address to remove (user@domain.com): " email
        remove_email_user "$email"
        ;;

    4)
        read -p "Enter new domain to add (e.g., example2.com): " new_domain
        manage_email_domains add "$new_domain"
        ;;

    5)
        read -p "Enter domain to remove (e.g., example2.com): " old_domain
        manage_email_domains remove "$old_domain"
        ;;

    6)
        read -p "Recipient email address: " email_to
        read -p "Subject: " email_subject
        read -p "Message Body: " email_body
        send_test_message "$email_to" "$email_subject" "$email_body"
        ;;

    7)
        set_postfix_custom_port
        ;;

    8)
        change_domain_hostname
        ;;

    9)
        read -p "Are you sure you want to uninstall Roundcube? (yes/no): " confirm
        [[ "$confirm" == "yes" ]] && uninstall_roundcube
        ;;

    10)
        read -p "WARNING: This will completely remove MailX. Continue? (yes/no): " confirm
        [[ "$confirm" == "yes" ]] && uninstall_all
        ;;

    *)
        echo "Invalid choice. Exiting."
        exit 1
        ;;
esac
